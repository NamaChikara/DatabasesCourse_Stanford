You've started a new movie-rating website, and you've been collecting data 
on reviewers' ratings of various movies. There's not much data yet, but you 
can still try out some interesting queries. Here's the schema: 

Movie ( mID, title, year, director ) 
English: There is a movie with ID number mID, a title, a release year, and 
	 a director. 

Reviewer ( rID, name ) 
English: The reviewer with ID number rID has a certain name. 

Rating ( rID, mID, stars, ratingDate ) 
English: The reviewer rID gave the movie mID a number of stars rating (1-5) 
	 on a certain ratingDate. 

Your queries are executed using SQLite, so you must conform to the SQL 
constructs supported by SQLite.

-----------------------------------------------------------------------------

Q1: Find the names of all reviewers who rated Gone with the Wind. 

Select distinct name
From (Reviewer join Rating using(rID)) R join Movie M
On R.mID = M.mID and M.title = 'Gone with the Wind';

-----------------------------------------------------------------------------

Q2: For any rating where the reviewer is the same as the director of the 
    movie, return the reviewer name, movie title, and number of stars. 

Select name, title, stars
From (Reviewer join Rating using(rID)) R join Movie M
On R.mID = M.mID and name = director;

-----------------------------------------------------------------------------

Q3: Return all reviewer names and movie names together in a single list, 
    alphabetized.

Select distinct name
From Reviewer
Union
Select distinct title
From Movie
Order by name;

-----------------------------------------------------------------------------

Q4: Find the titles of all movies not reviewed by Chris Jackson. 

Select title
From Movie
Where title not in (Select title 
                    From (Reviewer join Rating using(rID)) R join Movie M
                    On R.mID = M.mID 
                    Where R.name = 'Chris Jackson');

-----------------------------------------------------------------------------

Q5: For all pairs of reviewers such that both reviewers gave a rating to the 
    same movie, return the names of both reviewers. Eliminate duplicates, 
    don't pair reviewers with themselves, and include each pair only once. 
    For each pair, return the names in the pair in alphabetical order. 

Select distinct R1.name, R2.name
From (Reviewer natural join Rating) R1 join (Reviewer natural join Rating) R2
On R1.mID = R2.mID and R1.name < R2.name;

-----------------------------------------------------------------------------

Q6: For each rating that is the lowest (fewest stars) currently in the 
    database, return the reviewer name, movie title, and number of stars. 

Select name, title, stars
From (Reviewer join Rating using(rID)) R join Movie M
On R.mID = M.mID
Where R.stars = (Select min(stars) from Rating);

-----------------------------------------------------------------------------

Q7: List movie titles and average ratings, from highest-rated to lowest-rated. 
    If two or more movies have the same average rating, list them in
    alphabetical order. 

Select title, avg(stars) as avgRating
From Movie join Rating using(mID)
Group by title
Order by avgRating desc, title;

-----------------------------------------------------------------------------

Q8: Find the names of all reviewers who have contributed three or more ratings. 

Select name
From Reviewer join Rating using(rID)
Group By name
Having count(*) >= 3;

-----------------------------------------------------------------------------

Q9: Some directors directed more than one movie. For all such directors, return 
    the titles of all movies directed by them, along with the director name. 
    Sort by director name, then movie title.

Select title, director
From Movie
Where director in (Select director From Movie
                   Group By director
                   Having count(title) > 1)
Order By director, title;

-----------------------------------------------------------------------------

Q10: Find the movie(s) with the highest average rating. Return the movie 
     title(s) and average rating. (Hint: This query is more difficult to write 
     in SQLite than other systems; you might think of it as finding the highest 
     average rating and then choosing the movie(s) with that average rating.) 

Select title, avg(stars)
From Movie join Rating
On Movie.mID = Rating.mID
Group by Movie.mID
Having avg(Stars) = (Select max(avgRat)
                     From (Select avg(stars) as avgRat
                           From Rating
                           Group By mID))

-----------------------------------------------------------------------------

Q11: Find the movie(s) with the lowest average rating. Return the movie title(s) 
     and average rating. (Hint: This query may be more difficult to write in 
     SQLite than other systems; you might think of it as finding the lowest 
     average rating and then choosing the movie(s) with that average rating.) 

Select title, avg(stars)
From Movie join Rating
On Movie.mID = Rating.mID
Group by Movie.mID
Having avg(Stars) = (Select min(avgRat)
                     From (Select avg(stars) as avgRat
                           From Rating
                           Group By mID))

-----------------------------------------------------------------------------

Q12: For each director, return the director's name together with the title(s) 
     of the movie(s) they directed that received the highest rating among all 
     of their movies, and the value of that rating. Ignore movies whose director 
     is NULL. 



-----------------------------------------------------------------------------
