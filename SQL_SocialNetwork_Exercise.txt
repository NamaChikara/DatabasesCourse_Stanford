Students at your hometown high school have decided to organize their social 
network using databases. So far, they have collected information about sixteen 
students in four grades, 9-12. Here's the schema: 

Highschooler ( ID, name, grade ) 
English: There is a high school student with unique ID and a given first name 
         in a certain grade. 

Friend ( ID1, ID2 ) 
English: The student with ID1 is friends with the student with ID2. Friendship 
         is mutual, so if (123, 456) is in the Friend table, so is (456, 123). 

Likes ( ID1, ID2 ) 
English: The student with ID1 likes the student with ID2. Liking someone is 
         not necessarily mutual, so if (123, 456) is in the Likes table, there 
         is no guarantee that (456, 123) is also present. 

Your queries are executed using SQLite, so you must conform to the SQL 
constructs supported by SQLite.

-----------------------------------------------------------------------------
Q1: Find the names of all students who are friends with someone named Gabriel. 

Select name
From Highschooler
Where ID in (Select ID2 
             From Highschooler join Friend
             On ID = ID1
             Where name = 'Gabriel');

-----------------------------------------------------------------------------
Q2: For every student who likes someone 2 or more grades younger than 
    themselves, return that student's name and grade, and the name and grade 
    of the student they like.

Select Old.name, Old.grade, Young.name, Young.grade
From (Highschooler Join Likes On ID = ID1) As Old
       Join
      Highschooler As Young 
       On Old.ID2 = Young.ID
Where Old.grade - Young.grade >= 2;

-----------------------------------------------------------------------------
Q3: For every pair of students who both like each other, return the name and 
    grade of both students. Include each pair only once, with the two names in 
    alphabetical order. 

Select H1.name, H1.grade, H2.name, H2.grade
From (Highschooler H1 Join Highschooler H2 On
      H1.name < H2.name)
     Join
     (Likes L1 Join Likes L2 On 
      L1.ID2 = L2.ID1 and L1.ID1 = L2.ID2) As Match
     On 
      H1.ID = Match.ID1 and H2.ID = Match.ID2
Order By H1.name

-----------------------------------------------------------------------------
Q4: Find all students who do not appear in the Likes table (as a student who 
    likes or is liked) and return their names and grades. Sort by grade, then 
    by name within each grade. 

Select Highschooler.name, Highschooler.grade
From Highschooler Left Join Likes 
     On ID = ID1 or ID = ID2
Where ID1 is NULL and ID2 is NULL
Order By Highschooler.grade, Highschooler.name

-----------------------------------------------------------------------------
Q5: For every situation where student A likes student B, but we have no 
    information about whom B likes (that is, B does not appear as an ID1 in 
    the Likes table), return A and B's names and grades. 

Select HS1.name, HS1.grade, HS2.name, HS2.grade
From Highschooler HS1 Join Likes L1 On HS1.ID = L1.ID1
      Join Highschooler HS2 On L1.ID2 = HS2.ID
       Left Join Likes L2 On HS2.ID = L2.ID1
Where L2.ID1 is NULL

-----------------------------------------------------------------------------
Q6: Find names and grades of students who only have friends in the same grade. 
    Return the result sorted by grade, then by name within each grade. 

Select HS.name, HS.grade
From Highschooler HS
Where HS.ID not in (Select HS1.ID
                    From Highschooler HS1 
                         Join Friend On HS1.ID = ID1
                         Join Highschooler HS2 on ID2 = HS2.ID
                    Where HS1.grade <> HS2.grade)
Order By HS.grade, HS.name

-----------------------------------------------------------------------------
Q7: For each student A who likes a student B where the two are not friends, 
    find if they have a friend C in common (who can introduce them!). For all 
    such trios, return the name and grade of A, B, and C. 



-----------------------------------------------------------------------------
Q8: Find the difference between the number of students in the school and the 
    number of different first names. 

Select count(ID) - count(distinct name)
From Highschooler

-----------------------------------------------------------------------------
Q9: Find the name and grade of all students who are liked by more than one 
    other student. 

Select name, grade
From Highschooler Join Likes On ID = ID2
Group By ID
Having count(ID1) > 1

-----------------------------------------------------------------------------